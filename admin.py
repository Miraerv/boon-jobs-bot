# admin.py
import os
import ast
import math
import logging
import io
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

from db import (
    fetch_applications,
    count_applications,
    get_application,
    delete_application,
    export_applications_csv,
)

load_dotenv()
logger = logging.getLogger(__name__)

# –ü–∞—Ä—Å–∏–º MANAGER_IDS (–∫–∞–∫ –≤ bot.py). –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç env: [12345, 67890]
MANAGER_IDS = []
manager_ids_str = os.getenv("MANAGER_IDS")
if manager_ids_str:
    try:
        MANAGER_IDS = ast.literal_eval(manager_ids_str)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å MANAGER_IDS")
        MANAGER_IDS = []


def _is_admin(user_id: int) -> bool:
    return user_id in MANAGER_IDS


# ---- –•–µ–ª–ø–µ—Ä: –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—è–≤–æ–∫ ----
async def _render_apps_page_text_and_markup(page: int, per_page: int = 5):
    total = count_applications()
    total_pages = max(1, math.ceil(total / per_page))
    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1

    apps = fetch_applications(limit=per_page, offset=page * per_page)
    if not apps:
        text = "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
        markup = InlineKeyboardMarkup([])
        return text, markup, page, total_pages

    lines = []
    keyboard = []
    for a in apps:
        lines.append(f"#{a['id']} | {a['position']} ‚Äî {a['name']} | {a['phone']} | {a['created_at']}")
        # –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        keyboard.append([InlineKeyboardButton(f"–ü—Ä–æ—Å–º–æ—Ç—Ä #{a['id']} ‚Äî {a['name']}", callback_data=f"view:{a['id']}:{page}")])

    text = f"–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}\n\n" + "\n".join(lines)

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}"))
    if page + 1 < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"page:{page+1}"))
    nav_buttons.append(InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export"))

    keyboard.append(nav_buttons)
    markup = InlineKeyboardMarkup(keyboard)
    return text, markup, page, total_pages


# ---- –ö–æ–º–∞–Ω–¥–∞ /apps ----
async def apps_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.")
        return

    page = 0
    if context.args:
        try:
            page = int(context.args[0])
        except Exception:
            page = 0

    text, markup, page, _ = await _render_apps_page_text_and_markup(page)
    await update.message.reply_text(text, reply_markup=markup)


# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (view, del, page, export) ----
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = update.effective_user
    if not _is_admin(user.id):
        await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await query.answer()  # acknowledge

    data = query.data or ""

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ ---
    if data.startswith("view:"):
        parts = data.split(":")
        app_id = int(parts[1])
        page = int(parts[2]) if len(parts) > 2 else 0
        app = get_application(app_id)
        if not app:
            await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        text_lines = [
            f"–ó–∞—è–≤–∫–∞ #{app['id']}",
            f"–ü–æ–∑–∏—Ü–∏—è: {app['position']}",
            f"–ò–º—è: {app['name']}",
            f"–í–æ–∑—Ä–∞—Å—Ç: {app['age']}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}",
            f"–§–∏–ª–∏–∞–ª: {app['branch']}",
            f"–ì—Ä–∞—Ñ–∏–∫: {app['schedule']}",
            f"–û–ø—ã—Ç: {app['experience']}",
            f"–û–ø—ã—Ç –≤–æ–∂–¥–µ–Ω–∏—è: {app.get('driving_experience','')}",
            f"–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {app.get('selfemployed','')}",
            f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {app.get('salary_expect','')}",
            f"–°–æ–∑–¥–∞–Ω–æ: {app.get('created_at')}"
        ]
        text = "\n".join(text_lines)

        kb = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"del:{app_id}:{page}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"page:{page}")]
        ]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(kb))

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ---
    elif data.startswith("del:"):
        parts = data.split(":")
        app_id = int(parts[1])
        page = int(parts[2]) if len(parts) > 2 else 0
        deleted = delete_application(app_id)
        if deleted:
            text, markup, page, _ = await _render_apps_page_text_and_markup(page)
            await query.edit_message_text(text=text, reply_markup=markup)
        else:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É.", show_alert=True)

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º ---
    elif data.startswith("page:"):
        page = int(data.split(":")[1])
        text, markup, page, _ = await _render_apps_page_text_and_markup(page)
        await query.edit_message_text(text=text, reply_markup=markup)

    # --- –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç: –≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ ---
    elif data == "export":
        kb = [
            [InlineKeyboardButton("–í—Å–µ", callback_data="export_all")],
            [InlineKeyboardButton("–°–±–æ—Ä—â–∏–∫–∏", callback_data="export_–°–±–æ—Ä—â–∏–∫")],
            [InlineKeyboardButton("–ö—É—Ä—å–µ—Ä—ã", callback_data="export_–ö—É—Ä—å–µ—Ä")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=InlineKeyboardMarkup(kb))

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ---
    elif data.startswith("export_"):
        pos = data[len("export_"):]
        if pos.lower() == "all":
            pos = None
        csv_bytes = export_applications_csv(position=pos)
        bio = io.BytesIO(csv_bytes)
        bio.name = f"–ó–∞—è–≤–∫–∏_{pos or '–í—Å–µ'}.csv"
        bio.seek(0)
        await context.bot.send_document(chat_id=query.message.chat_id, document=bio)
        await query.answer("CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    else:
        await query.answer()  # –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å



# ---- —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ----
def register_admin_handlers(app):
    app.add_handler(CommandHandler("apps", apps_list))
    app.add_handler(CallbackQueryHandler(admin_callback))
